/* tslint:disable */
/* eslint-disable */
/**
 * Digital Coil Backend Prototype 2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface DigitalCoilFM
 */
export interface DigitalCoilFM {
  /**
   *
   * @type {string}
   * @memberof DigitalCoilFM
   */
  id_fm?: string
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>
}
/**
 * Based on the Features, the machine learning algorithm provides a recommendation.
 * @export
 * @interface ResponseMetadataRecommendation
 */
export interface ResponseMetadataRecommendation {
  /**
   *
   * @type {number}
   * @memberof ResponseMetadataRecommendation
   */
  cm50_einlauf: number
  /**
   *
   * @type {number}
   * @memberof ResponseMetadataRecommendation
   */
  cm50_auslauf: number
  /**
   *
   * @type {number}
   * @memberof ResponseMetadataRecommendation
   */
  cm70_einlauf: number
  /**
   *
   * @type {number}
   * @memberof ResponseMetadataRecommendation
   */
  cm70_auslauf: number
  /**
   *
   * @type {string}
   * @memberof ResponseMetadataRecommendation
   */
  supplier: string
  /**
   *
   * @type {string}
   * @memberof ResponseMetadataRecommendation
   */
  id_material: string
  /**
   *
   * @type {string}
   * @memberof ResponseMetadataRecommendation
   */
  quality_description: string
  /**
   *
   * @type {number}
   * @memberof ResponseMetadataRecommendation
   */
  width: number
  /**
   *
   * @type {number}
   * @memberof ResponseMetadataRecommendation
   */
  thickness: number
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<string | number>}
   * @memberof ValidationError
   */
  loc: Array<string | number>
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Apply the model on the features and return recommendation.
     * @summary Request Metadata Recommendation
     * @param {DigitalCoilFM} digitalCoilFM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestMetadataRecommendationRequestMetadataRecommendationPost: async (
      digitalCoilFM: DigitalCoilFM,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'digitalCoilFM' is not null or undefined
      assertParamExists(
        'requestMetadataRecommendationRequestMetadataRecommendationPost',
        'digitalCoilFM',
        digitalCoilFM
      )
      const localVarPath = `/request_metadata_recommendation`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        digitalCoilFM,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     * Apply the model on the features and return recommendation.
     * @summary Request Metadata Recommendation
     * @param {DigitalCoilFM} digitalCoilFM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestMetadataRecommendationRequestMetadataRecommendationPost(
      digitalCoilFM: DigitalCoilFM,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ResponseMetadataRecommendation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestMetadataRecommendationRequestMetadataRecommendationPost(
          digitalCoilFM,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     * Apply the model on the features and return recommendation.
     * @summary Request Metadata Recommendation
     * @param {DigitalCoilFM} digitalCoilFM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestMetadataRecommendationRequestMetadataRecommendationPost(
      digitalCoilFM: DigitalCoilFM,
      options?: any
    ): AxiosPromise<ResponseMetadataRecommendation> {
      return localVarFp
        .requestMetadataRecommendationRequestMetadataRecommendationPost(
          digitalCoilFM,
          options
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * Apply the model on the features and return recommendation.
   * @summary Request Metadata Recommendation
   * @param {DigitalCoilFM} digitalCoilFM
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public requestMetadataRecommendationRequestMetadataRecommendationPost(
    digitalCoilFM: DigitalCoilFM,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .requestMetadataRecommendationRequestMetadataRecommendationPost(
        digitalCoilFM,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
